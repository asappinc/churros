apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion compileVersion
    defaultConfig {
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode 2
        versionName churrosVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

bintray {
    user = System.getenv('BINTRAY_USER') ?: BINTRAY_USER
    key = System.getenv('BINTRAY_API_KEY') ?: BINTRAY_API_KEY
    dryRun = false // For test purposes you can turn it on

    // Change this, only if you want to override a PUBLISHED version.
    override = false

    // The word 'Production' is a reference to the object created in publications below.
    publications = ['Production']
    pkg {
        repo = 'Churros'
        name = 'com.asapp.churros'
        userOrg = 'asapp'
        version {
            name = churrosVersion
            released = new Date()
        }
    }
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/churros-release.aar")
            groupId 'com.asapp.churros'
            artifactId 'churros'
            version churrosVersion

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "com.android.support:appcompat-v7:$androidSupportLibVersion"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // RxJava2
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
}
